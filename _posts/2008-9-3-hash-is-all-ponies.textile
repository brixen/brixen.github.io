--- 
title: Hash is all ponies
layout: post
author: Brian
---
We've been hard at work replacing the C virtual machine in "Rubinius":http://rubini.us with one written in C++. Along the way, we decided to use a simpler data structure internally where we had been using a Hash before. This allowed us to rewrite Hash in pure Ruby. Since our goal is to write as much "Ruby in Ruby":http://blog.brightredglow.com/2008/4/28/ruby-in-ruby-seriously, I was happy to work on this rewrite.

You can check out the resulting code "here":http://github.com/evanphx/rubinius/tree/cpp/kernel/bootstrap/hash.rb and "here":http://github.com/evanphx/rubinius/tree/cpp/kernel/common/hash.rb. It hasn't been polished much yet, but the idea was to use expressive and natural Ruby. I didn't take any performance-conscious tacks. Hash should provide a great case study for looking at optimizations in our compiler and VM. For example, <code>Hash#keys</code> can be succinctly written as:

<pre>
def keys
  inject([]) { |ary, entry| ary << entry.first }
end
</pre>

Since <code>#inject</code> comes from the <code>Enumerable</code> module, we know it's using <code>#each</code> internally. And for Hash, I implemented an external iterator of sorts to help hide the implementation details. That iterator is making a method call for each item. So we've piled on two block calls and a method call for each item. The point is, we want that expressive Ruby code in our applications and let the implementation optimize it. So far, we really haven't had any Ruby implementation to give us that.

Another thing to check out is the structure of our "kernel directory":http://github.com/evanphx/rubinius/tree/7f8af1531125850bc75b8315269a7e0528e98c50/kernel. Talking to the folks working on "MagLev":http://ruby.gemstone.com/, we've restructured our runtime kernel (aka Ruby standard library) to better allow sharing with other implementations. The <code>bootstrap</code> and <code>delta</code> directories are implementation specific, while the <code>common</code> directory is intended to be shared. The <code>bootstrap</code> directory provides just enough functionality to load the <code>common</code> directory. The <code>delta</code> directory provides a location for implementation specialization where specific methods can be replaced with more performant or otherwise specialized versions.

As always, we love to hear from folks about what's bugging them with Ruby. Drop by #rubinius on freenode.net or check out the "Rubinius":http://github.com/evanphx/rubinius/tree/master project on "Github":http://github.com. Even though we're in the middle of this VM rewrite, there's plenty still to be done on the Ruby standard library.

*Update:* "Evan":http://blog.fallingsnow.net points out that this is a better implementation of <code>#keys</code>:

<pre>
def keys
  map { |key, value| key }
end
</pre>
