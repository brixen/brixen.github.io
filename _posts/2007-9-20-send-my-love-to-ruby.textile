--- 
title: Send my love to Ruby
layout: post
author: Brian
---
Over at the "Rubinius":http://rubini.us project, in between hatching plots to take over the world, we fit in some time for recreation. For example, we've got this masochistic interest in writing "RSpec":http://rspec.rubyforge.org compatible specs for the Ruby core library. One of the challenges there is the large number of aliased methods that Ruby has. Using RSpec's shared behaviors as an example, I've created a flavor of shared behaviors in our @mini_rspec@ implementation. As the code below shows, this makes it straightforward to spec all these aliases.

<pre><code>
hash_store = shared "Hash#store" do |cmd|
  describe "Hash##{cmd}" do
    it "associates the key with the value and return the value" do
      h = { :a => 1 }
      (h.send(cmd, :b, 2).should == 2
      h.should == {:b=>2, :a=>1}
    end

    it "duplicates and freezes string keys" do
      key = "foo"
      h = {}
      h.send(cmd, key, 0)
      key << "bar"

      h.should == { "foo" => 0 }
      h.keys[0].frozen?.should == true
    end

    it "duplicates string keys using dup semantics" do
      # dup doesn't copy singleton methods
      key = "foo"
      def key.reverse() "bar" end
      h = {}
      h.send(cmd, key, 0)

      h.keys[0].reverse.should == "oof"
    end  

    it "raises TypeError if called on a frozen instance" do
      should_raise(TypeError) { hash.send(cmd, 1, 2) }
    end
  end
end

describe "Hash#[]=" do
  it_behaves_like(hash_store, :[]=)
end
</code></pre>

The very cool thing about this is how useful Ruby's @send@ method is. And in Rubinius, it gets even cooler, as you'll see in "part II":http://blog.brightredglow.com/2007/9/20/send-my-love-to-ruby-ii
